// src/scraper.js
const puppeteerExtra = require("puppeteer-extra");
const Stealth = require("puppeteer-extra-plugin-stealth");
const axios = require("axios");
const { URL } = require("url");


puppeteerExtra.use(Stealth());

let browser;
const pages = new Map(); // vacancyId -> Puppeteer Page

async function getBrowser() {
  if (browser && browser.isConnected()) return browser;
  const host = process.env.PUPPETEER_DEBUG_HOST || "localhost";
  const port = process.env.PUPPETEER_DEBUG_PORT || 9222;
  const versionUrl = `http://${host}:${port}/json/version`;
  console.log("üåê Fetching DevTools endpoint from", versionUrl);
  const { data } = await axios.get(versionUrl, { timeout: 15000 });
  const wsEndpoint = data.webSocketDebuggerUrl;
  browser = await puppeteerExtra.connect({
    browserWSEndpoint: wsEndpoint,
    defaultViewport: null,
  });
  console.log("‚úÖ Puppeteer connected to", wsEndpoint);
  return browser;
}

async function safeGoto(page, url, opts) {
  for (let i = 0; i < 3; i++) {
    try {
      return await page.goto(url, opts);
    } catch (e) {
      if (e.message.includes("ERR_NETWORK_CHANGED") && i < 2) {
        console.warn(`‚ö†Ô∏è network error, retry ${i + 1}/3`);
        await page.waitForTimeout(1000 * (i + 1));
        continue;
      }
      throw e;
    }
  }
}
async function getVacancyDescription(page) {
  // 1. –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–∫—Ä—ã—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ ¬´–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é¬ª
  const expandButtonSelector =
    '[data-qa="vacancy-description-toggle-button"], [data-qa="vacancy-description-toggle"]';
  const expandBtn = await page.$(expandButtonSelector);
  if (expandBtn) {
    try {
      await expandBtn.click();
      await page.waitForTimeout(500);
    } catch (err) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ:", err);
    }
  }

  // 2. –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –±–ª–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
  const selectors = [
    '[data-qa="vacancy-description"]',
    "#vacancy-description__text",
    ".vacancy-description",
    ".g-user-content",
  ];

  for (const sel of selectors) {
    try {
      await page.waitForSelector(sel, { timeout: 2000 });
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ <p> –∏ <li> –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      const content = await page.$eval(sel, (container) => {
        const nodes = Array.from(container.querySelectorAll("p, li"));
        const texts = nodes
          .map((node) => node.innerText.trim())
          .filter(Boolean);
        if (texts.length) {
          // —Ä–∞–∑–¥–µ–ª—è–µ–º –∞–±–∑–∞—Ü—ã –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
          return texts.join("\n\n");
        }
        // –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ <p> –∏–ª–∏ <li>, –±–µ—Ä—ë–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
        return container.innerText.trim();
      });

      if (content) {
        console.log(`‚Üí Found description by ${sel}`);
        return content;
      }
    } catch {
      // —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    }
  }

  // 3. –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  console.warn("‚ö†Ô∏è Falling back to full page text");
  return (await page.evaluate(() => document.body.innerText)).trim();
}

async function applyOnPage(page, coverLetterText) {
  // 0) –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–∫–ª–∏–∫
  const alreadyResponded = await page.$x(
    "//div[contains(., '–í—ã¬†–æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å')]"
  );
  if (alreadyResponded.length > 0) {
    console.warn("‚ö†Ô∏è Already responded ‚Äî skipping application");
    return { success: false, skipped: true };
  }

  console.log('‚Üí Clicking initial "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"');
  const [initBtn] = await page.$x("//span[contains(text(),'–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è')]");
  if (!initBtn) throw new Error("Initial respond button not found");

  // 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–∫–∞
  let redirected = false;
  await Promise.all([
    initBtn.click(),
    page
      .waitForNavigation({ timeout: 3000 })
      .then(() => {
        redirected = true;
      })
      .catch(() => {
        /* —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–µ –±—ã–ª–æ */
      }),
  ]);

  if (redirected) {
    console.warn("‚ö†Ô∏è Redirect detected after initial click ‚Äî aborting");
    return { success: false };
  }

  await page.waitForTimeout(500);

  // 2) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ä–µ–ª–æ–∫–∞—Ü–∏–∏ (–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞)
  const relocationSel = '[data-qa="relocation-warning-confirm"]';
  if (await page.$(relocationSel)) {
    console.log("‚Üí Confirming relocation warning");

    redirected = false;
    await Promise.all([
      page.click(relocationSel),
      page
        .waitForNavigation({ timeout: 1000 })
        .then(() => {
          redirected = true;
        })
        .catch(() => {
          /* —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–µ –±—ã–ª–æ */
        }),
    ]);

    if (redirected) {
      console.warn(
        "‚ö†Ô∏è Redirect detected after relocation confirmation ‚Äî aborting"
      );
      return { success: false };
    }

    await page.waitForTimeout(500);
  }

  console.log("‚Üí Waiting for response modal");
  await page.waitForSelector('form[name="vacancy_response"]', {
    visible: true,
    timeout: 1000,
  });
  await page.waitForTimeout(300)

  // 3) –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∫–ª–∏–∫–∞–µ–º "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ"
  const addBtnSel = 'button[data-qa="add-cover-letter"]';
  const addCoverLetterBtn = await page
    .waitForSelector(addBtnSel, { visible: true, timeout: 1000 })
    .catch(() => null);
  if (addCoverLetterBtn) {
    console.log('‚Üí Scrolling to and clicking "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ"');
    await addCoverLetterBtn.evaluate((el) =>
      el.scrollIntoView({ block: "center" })
    );
    await page.waitForTimeout(200);
    try {
      await addCoverLetterBtn.click({ delay: 50 });
    } catch {
      await page.evaluate((sel) => {
        const btn = document.querySelector(sel);
        if (btn)
          btn.dispatchEvent(
            new MouseEvent("click", { bubbles: true, cancelable: true })
          );
      }, addBtnSel);
    }
    await page.waitForTimeout(500);
  } else {
    console.log('‚Üí No "–î–æ–±–∞–≤–∏—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ" button found ‚Äî skipping');
  }

  // 4) –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ
  console.log("‚Üí Filling cover letter with human-like typing");
  const textareaSel =
    'textarea[data-qa="vacancy-response-popup-form-letter-input"]';

  // –∂–¥—ë–º –∏ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è
  await page.waitForSelector(textareaSel, { visible: true, timeout: 2000 });
  await page.focus(textareaSel);

  // –Ω–∞–¥—ë–∂–Ω–æ –æ—á–∏—â–∞–µ–º:
  await page.waitForTimeout(randomIntFromInterval(100, 300));
  //  - Ctrl+A (–≤—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë) + Backspace
  await page.keyboard.down("Control");
  await page.keyboard.press("KeyA");
  await page.keyboard.up("Control");
  await page.keyboard.press("Backspace");
  // –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º
  await page.waitForTimeout(randomIntFromInterval(100, 300));

  for (const char of coverLetterText) {
    await page.type(textareaSel, char, { delay: randomIntFromInterval(5, 15) });
  }

  // –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞, —á—Ç–æ–±—ã —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äú—É—Å–ø–æ–∫–æ–∏–ª–∞—Å—å‚Äù
  await page.waitForTimeout(randomIntFromInterval(200, 500));

  // 5) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
  console.log("‚Üí Clicking submit button in modal");
  const submitSel = 'button[data-qa="vacancy-response-submit-popup"]';
  await page.waitForSelector(`${submitSel}:not([disabled])`, {
    visible: true,
    timeout: 2000,
  });
  await page.click(submitSel);

  console.log("‚úÖ Application submitted successfully");
  return { success: true };
}

async function scrapeVacancy(url) {
  const browser = await getBrowser();
  const page = await browser.newPage();
  page.setDefaultTimeout(0);
  page.setDefaultNavigationTimeout(0);
  console.log("‚Üí Opening", url);
  await safeGoto(page, url, { waitUntil: "domcontentloaded", timeout: 0 });
  console.log("ready to scrape");
  const description = await getVacancyDescription(page);
  const vacancyId = new URL(url).pathname.split("/").filter(Boolean).pop();
  pages.set(vacancyId, page);
  console.log(`üÜî Saved page for vacancyId: ${vacancyId}`);
  return { vacancyId, description };
}

async function applyToVacancy(vacancyId, coverLetterText) {
  const page = pages.get(vacancyId);
  if (!page) throw new Error(`Session for ${vacancyId} not found`);
  const result = await applyOnPage(page, coverLetterText);
  await page.close();
  pages.delete(vacancyId);
  console.log(`üóëÔ∏è Closed page for vacancyId: ${vacancyId}`);
  return result;
}

/**
 * –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ –Ω–∏–∑–∞, —á—Ç–æ–±—ã –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –ª–µ–Ω–∏–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
 */
async function autoScroll(page) {
  await page.evaluate(async () => {
    const distance = 100;
    const delay = 100;
    while (
      document.scrollingElement.scrollTop + window.innerHeight <
      document.scrollingElement.scrollHeight
    ) {
      document.scrollingElement.scrollBy(0, distance);
      await new Promise((r) => setTimeout(r, delay));
    }
  });
}

/**
 * –ó–∞–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ 50 –≤–∞–∫–∞–Ω—Å–∏–π —Å hh.ru (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–º–∏—É–º‚Äë–∫–∞—Ä—Ç–æ—á–∫–∏).
 */
async function scrapeVacancyList(url) {
  const browser = await getBrowser();
  const page = await browser.newPage();

  await safeGoto(page, url, {
    waitUntil: "domcontentloaded",
    timeout: 0,
  });

  // 6) –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑, —á—Ç–æ–±—ã —Å—Ä–∞–±–æ—Ç–∞–ª lazy‚Äëload
  await autoScroll(page);

  // 7) –ñ–¥—ë–º, –ø–æ–∫–∞ –ø–æ—è–≤—è—Ç—Å—è –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–≤–∫–ª—é—á–∞—è premium)
  await page.waitForSelector('[data-qa^="vacancy-serp__vacancy"]', {
    timeout: 30000,
  });

  // 8) –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
  const vacancies = await page.$$eval(
    '[data-qa^="vacancy-serp__vacancy"]',
    (nodes) =>
      nodes
        .map((node) => {
          const link = node.querySelector('a[data-qa="serp-item__title"]');
          if (!link) return null;

          const url = link.href;
          const title =
            link
              .querySelector('[data-qa="serp-item__title-text"]')
              ?.innerText.trim() || "";
          const match = url.match(/vacancy\/(\d+)/);
          const vacancyId = match ? match[1] : null;

          return { vacancyId, url, title };
        })
        .filter(Boolean)
  );

  await page.close();
  return vacancies;
}

function randomIntFromInterval(min, max) {
  // min and max included
  return Math.floor(Math.random() * (max - min + 1) + min);
}

module.exports = { scrapeVacancy, applyToVacancy, scrapeVacancyList };
